# auto-generated by grc.converter

id: specest_spectrum_sink
label: SpecEst Pseudospectrum Sink
category: Spectrum Estimation

parameters:
-   id: title
    label: Title
    dtype: string
    default: Spectrum Estimation Plot
-   id: estimator
    label: Estimator Type
    dtype: string
    default: esprit
    options: [esprit, music]
    option_labels: [ESPRIT, MUSIC]
-   id: samp_rate
    label: Sample Rate
    dtype: real
    default: samp_rate
-   id: baseband_freq
    label: Baseband Freq
    dtype: real
    default: '0'
-   id: y_per_div
    label: Y per Div
    dtype: enum
    default: '10'
    options: ['1', '2', '5', '10', '20']
    option_labels: [1 dB, 2 dB, 5 dB, 10 dB, 20 dB]
-   id: y_divs
    label: Y Divs
    dtype: int
    default: '10'
-   id: ref_level
    label: Ref Level (dB)
    dtype: real
    default: '50'
-   id: pspectrum_len
    label: Length of Pseudospectrum
    dtype: int
    default: '1024'
-   id: corr_m
    label: Correlation Parameter m
    dtype: int
    default: '64'
-   id: corr_nsamples
    label: Correlation Parameter nsamples
    dtype: int
    default: '1024'
-   id: model_n
    label: Estimator Parameter n
    dtype: int
    default: '2'
-   id: win_size
    label: Window Size
    dtype: int_vector
    hide: ${ ('none' if win_size else 'part') }
-   id: grid_pos
    label: Grid Position
    dtype: grid_pos
-   id: notebook
    label: Notebook
    dtype: notebook

inputs:
-   domain: stream
    dtype: complex
asserts:
- ${ not win_size or len(win_size) == 2 }

templates:
    imports: |-
        from gnuradio.filter import window
        from specest import spectrum_sink_c
    make: "<% parent = notebook and 'self.%s.GetPage(%s)'%notebook or 'self' %>\n\
        spectrum_sink_c (${parent}.GetWin(), title=${title}, pspectrum_len=${pspectrum_len},\n\
        \                 sample_rate=${samp_rate}, baseband_freq=${baseband_freq},\n\
        \                 ref_level=${ref_level}, y_per_div=${y_per_div}, y_divs=${y_divs},\
        \ m = ${corr_m}, n = ${model_n}, nsamples = ${corr_nsamples},\n          \
        \       estimator=${estimator},\n\t\t\t\t\t\t\t\t % if win_size:\n\t\t\t\t\
        \t\t\t\t\tsize=${win_size},\n\t\t\t\t\t\t\t\t % endif\n\t\t\t\t\t\t\t\t)\n\
        % if not grid_pos:\n${parent}.Add(self.${id}.win)\n% else:\n${parent}.GridAdd(self.${id}.win,\
        \ ${', '.join(map(str, grid_pos))})\n% endif"
    callbacks:
    - set_baseband_freq(${baseband_freq})
    - set_sample_rate(${samp_rate})

documentation: |-
    Leave the window blank for the default size, otherwise enter a tuple of (width, height) pixels.

    Use the Grid Position (row, column, row span, column span) to position the graphical element in the window.

    Use the Notebook Param (notebook-id, page-index) to place the graphical element inside of a notebook page.

    Set Estimator to 'esprit' for ESPRIT spectrum and to 'music' for MUSIC spectrum.

file_format: 1
